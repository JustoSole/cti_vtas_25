#!/usr/bin/env python3
"""
üéØ Lead Generator App - Aplicaci√≥n de Streamlit
Generador inteligente de leads usando Google Places API
"""

import streamlit as st
import pandas as pd
import time
from datetime import datetime
import io

# Importar nuestros m√≥dulos
from main_orchestrator import main
from google_sheets_manager import GoogleSheetsManager

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Lead Generator",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para mejorar la apariencia
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .config-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
    }
    
    .instructivo-box {
        background: linear-gradient(45deg, #e3f2fd, #f3e5f5);
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        border-left: 4px solid #667eea;
    }
    
    .success-banner {
        background: linear-gradient(90deg, #56CCF2 0%, #2F80ED 100%);
        padding: 1rem;
        border-radius: 8px;
        color: white;
        text-align: center;
        margin: 1rem 0;
    }
    
    .progress-section {
        background: #ffffff;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    .help-tab {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
    }
    
    .metric-container {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin: 0.5rem 0;
    }
    

    
    .login-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 5rem auto;
        max-width: 500px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }
    
    .login-form {
        background: rgba(255, 255, 255, 0.1);
        padding: 2rem;
        border-radius: 10px;
        margin-top: 2rem;
        backdrop-filter: blur(10px);
    }
    
    .error-message {
        background: #ff4757;
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        text-align: center;
    }
    
    .dashboard-container {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 2rem 0;
        border: 1px solid #dee2e6;
    }
    
    .dashboard-header {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 1.5rem;
    }
    
    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    
    .recent-activity {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializa el estado de la sesi√≥n"""
    if 'results_df' not in st.session_state:
        st.session_state.results_df = None
    if 'search_completed' not in st.session_state:
        st.session_state.search_completed = False
    if 'current_stats' not in st.session_state:
        st.session_state.current_stats = {
            'places_found': 0,
            'emails_found': 0,
            'sheets_uploaded': 0
        }
    # Estado de autenticaci√≥n
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False

def create_header():
    """Crea el header principal de la aplicaci√≥n"""
    st.markdown("""
    <div class="main-header">
        <h1>COTI LEAD GENERATOR</h1>
        <p>Encuentra y enriquece leads de negocios usando Google Maps y web scraping inteligente</p>
    </div>
    """, unsafe_allow_html=True)

def show_dashboard():
    """Muestra el dashboard con estad√≠sticas hist√≥ricas"""
    from datetime import datetime
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    st.markdown(f"""
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h3>üìä Dashboard Hist√≥rico de B√∫squedas</h3>
            <p>Resumen de todas las b√∫squedas realizadas y datos almacenados</p>
            <small style="opacity: 0.8;">√öltima actualizaci√≥n: {current_time}</small>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Obtener estad√≠sticas del Google Sheets
        with st.spinner("üìä Cargando estad√≠sticas hist√≥ricas..."):
            sheets_manager = GoogleSheetsManager()
            stats = sheets_manager.get_stats()
            
            # Indicador de estado del sistema
            if stats['total_records'] >= 0:  # Si obtuvimos estad√≠sticas, est√° funcionando
                st.success("üü¢ **Sistema Conectado** - Google Sheets respondiendo correctamente")
            else:
                st.warning("üü° **Conexi√≥n Limitada** - Puede haber problemas de conectividad")
        
        # M√©tricas principales en columnas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="stat-card">
                <h2 style="color: #28a745; margin: 0;">üìã</h2>
                <h3 style="margin: 0.5rem 0;">{}</h3>
                <p style="margin: 0; color: #6c757d;">Total Registros</p>
            </div>
            """.format(stats['total_records']), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="stat-card">
                <h2 style="color: #007bff; margin: 0;">üìß</h2>
                <h3 style="margin: 0.5rem 0;">{}</h3>
                <p style="margin: 0; color: #6c757d;">Emails Extra√≠dos</p>
            </div>
            """.format(stats['emails_found']), unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="stat-card">
                <h2 style="color: #ffc107; margin: 0;">üåê</h2>
                <h3 style="margin: 0.5rem 0;">{}</h3>
                <p style="margin: 0; color: #6c757d;">Sitios Web</p>
            </div>
            """.format(stats['websites_found']), unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="stat-card">
                <h2 style="color: #dc3545; margin: 0;">üîç</h2>
                <h3 style="margin: 0.5rem 0;">{}</h3>
                <p style="margin: 0; color: #6c757d;">B√∫squedas √önicas</p>
            </div>
            """.format(stats['unique_searches']), unsafe_allow_html=True)
        
        # M√©tricas de eficiencia
        if stats['total_records'] > 0:
            st.markdown("### üìà Eficiencia de Extracci√≥n")
            eff_col1, eff_col2, eff_col3 = st.columns(3)
            
            email_percentage = (stats['emails_found'] / stats['total_records']) * 100
            website_percentage = (stats['websites_found'] / stats['total_records']) * 100
            avg_per_search = stats['total_records'] / max(stats['unique_searches'], 1)
            
            with eff_col1:
                st.metric(
                    "üìß Tasa de Emails",
                    f"{email_percentage:.1f}%",
                    f"{stats['emails_found']} de {stats['total_records']}"
                )
            
            with eff_col2:
                st.metric(
                    "üåê Tasa de Websites", 
                    f"{website_percentage:.1f}%",
                    f"{stats['websites_found']} de {stats['total_records']}"
                )
            
            with eff_col3:
                st.metric(
                    "üéØ Promedio por B√∫squeda",
                    f"{avg_per_search:.0f}",
                    "registros encontrados"
                )
        
        # Secci√≥n de actividad reciente y b√∫squedas m√°s realizadas
        if stats['recent_activity'] or stats['search_distribution']:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("""
                <div class="recent-activity">
                    <h4>üïí Actividad Reciente</h4>
                </div>
                """, unsafe_allow_html=True)
                
                if stats['recent_activity']:
                    for activity in stats['recent_activity'][:5]:
                        fecha = activity['date'][:16] if len(activity['date']) > 16 else activity['date']
                        st.markdown(f"‚Ä¢ **{activity['query']}** - {fecha}")
                else:
                    st.info("No hay actividad reciente registrada")
            
            with col2:
                st.markdown("""
                <div class="recent-activity">
                    <h4>üî• B√∫squedas M√°s Realizadas</h4>
                </div>
                """, unsafe_allow_html=True)
                
                if stats['search_distribution']:
                    # Mostrar lista de b√∫squedas
                    for query, count in list(stats['search_distribution'].items())[:5]:
                        st.markdown(f"‚Ä¢ **{query}** ({count} veces)")
                    
                    # Gr√°fico de barras simple si hay datos
                    if len(stats['search_distribution']) > 1:
                        st.markdown("---")
                        st.markdown("**üìä Distribuci√≥n Visual:**")
                        chart_data = dict(list(stats['search_distribution'].items())[:5])
                        st.bar_chart(chart_data)
                else:
                    st.info("No hay b√∫squedas registradas a√∫n")
        else:
            st.info("üí° Realiza tu primera b√∫squeda para ver estad√≠sticas detalladas")
        
        # Botones de acci√≥n
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ Actualizar Dashboard", use_container_width=True):
                st.rerun()
        
        with col2:
            try:
                sheets_url = sheets_manager.get_sheet_url()
                st.link_button(
                    "üìä Ver en Google Sheets",
                    sheets_url,
                    use_container_width=True,
                    type="secondary"
                )
            except:
                pass
        
        with col3:
            st.button("üìà Nuevo An√°lisis", use_container_width=True, disabled=True, help="Pr√≥ximamente: an√°lisis avanzado de datos")
        
    except Exception as e:
        st.error(f"‚ùå Error cargando el dashboard: {str(e)}")
        st.info("üí° El dashboard se mostrar√° cuando realices tu primera b√∫squeda")

def show_instructivo():
    """Muestra el mini instructivo en la parte superior"""
    st.markdown("""
    <div class="instructivo-box">
        <h4>üìã Mini Instructivo</h4>
        <p><strong>1.</strong> Especifica el <strong>tipo de negocio</strong> que buscas (ej: "restaurantes", "gimnasios", "dentistas")</p>
        <p><strong>2.</strong> Ingresa la <strong>ubicaci√≥n</strong> espec√≠fica (recomiendo por barrio o ciudad si no es tan grande)</p>
        <p><strong>3.</strong> Haz clic en <strong>"Iniciar B√∫squeda"</strong> y observa el progreso en tiempo real</p>
        <p><strong>‚ÑπÔ∏è</strong> La b√∫squeda incluye autom√°ticamente <strong>web scraping</strong> para extraer emails y <strong>guardado en Google Sheets</strong></p>
    </div>
    """, unsafe_allow_html=True)

def show_progress_section():
    """Muestra la secci√≥n de progreso mejorada durante la ejecuci√≥n"""
    st.markdown("""
    <div class="progress-section">
        <h3>üîÑ Proceso en Ejecuci√≥n</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Barra de progreso principal
    main_progress = st.progress(0)
    status_text = st.empty()
    
    # Crear contenedor para estad√≠sticas detalladas
    stats_container = st.container()
    
    with stats_container:
        st.markdown("#### üìä Estad√≠sticas en Tiempo Real")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            places_metric = st.empty()
        with col2:
            scraped_metric = st.empty()
        with col3:
            sheets_metric = st.empty()
    
    # Contenedor para informaci√≥n detallada
    details_container = st.container()
    
    with details_container:
        st.markdown("#### üìã Detalles del Proceso")
        details_text = st.empty()
    
    return main_progress, status_text, places_metric, scraped_metric, sheets_metric, details_text

def execute_search(query, location, include_scraping, save_to_sheets):
    """Ejecuta la b√∫squeda con indicadores de progreso mejorados en tiempo real"""
    
    # Configurar progreso
    main_progress, status_text, places_metric, scraped_metric, sheets_metric, details_text = show_progress_section()
    
    try:
        # Inicializar estad√≠sticas
        st.session_state.current_stats = {
            'places_found': 0,
            'emails_found': 0,
            'sheets_uploaded': 0
        }
        
        # Crear callback mejorado para actualizar progreso
        def update_progress_callback(step, message, count=None):
            if step == "places_searching":
                main_progress.progress(5)
                status_text.text(f"üîç {message}")
                places_metric.metric("üìç Lugares Encontrados", "0", delta="Iniciando...")
                details_text.info(f"üîç **Google Places**: {message}")
            
            elif step == "places_progress":
                current_point, total_points, found_count = count
                progress_percentage = 10 + int((current_point / total_points) * 40) # 10% a 50%
                main_progress.progress(progress_percentage)
                status_text.text(f"üîç Buscando en grilla... ({current_point}/{total_points})")
                places_metric.metric("üìç Lugares Encontrados", str(found_count), delta="Buscando...")
                details_text.info(f"üîç **Google Places**: {message}")

            elif step == "places_details_progress":
                current, total = count
                progress_percentage = 50 + int((current / total) * 10) # 50% a 60%
                main_progress.progress(progress_percentage)
                status_text.text(f"üõ†Ô∏è Obteniendo detalles... ({current}/{total})")
                details_text.info(f"üõ†Ô∏è **Google Places**: {message}")

            elif step == "places_found":
                main_progress.progress(60)
                status_text.text(f"‚úÖ {message}")
                st.session_state.current_stats['places_found'] = count
                places_metric.metric("üìç Lugares Encontrados", count, delta=f"‚úÖ Completado")
                details_text.success(f"‚úÖ **Google Places**: {message} - Total: {count}")
                
            elif step == "scraping_start":
                main_progress.progress(65)
                status_text.text(f"üåê {message}")
                scraped_metric.metric("üåê Emails Extra√≠dos", "0", delta="Iniciando...")
                details_text.info(f"üåê **Web Scraping**: {message}")
                
            elif step == "scraping_progress":
                progress_value = 65 + (count or 0) * 0.25
                main_progress.progress(min(progress_value, 85))
                status_text.text(f"üåê {message}")
                scraped_metric.metric("üåê Emails Extra√≠dos", f"~{count or 0}%", delta="Procesando...")
                details_text.info(f"üåê **Web Scraping**: {message} - Progreso: {count or 0}%")
                
            elif step == "scraping_complete":
                main_progress.progress(85)
                status_text.text(f"‚úÖ {message}")
                st.session_state.current_stats['emails_found'] = count
                scraped_metric.metric("üåê Emails Extra√≠dos", count, delta="‚úÖ Completado")
                details_text.success(f"‚úÖ **Web Scraping**: {message} - Emails obtenidos: {count}")
                
            elif step == "sheets_start":
                main_progress.progress(90)
                status_text.text(f"‚òÅÔ∏è {message}")
                sheets_metric.metric("‚òÅÔ∏è Google Sheets", "0", delta="Subiendo...")
                details_text.info(f"‚òÅÔ∏è **Google Sheets**: {message}")
                
            elif step == "sheets_complete":
                main_progress.progress(100)
                status_text.text(f"‚úÖ {message}")
                st.session_state.current_stats['sheets_uploaded'] = count
                sheets_metric.metric("‚òÅÔ∏è Google Sheets", count, delta="‚úÖ Completado")
                details_text.success(f"‚úÖ **Google Sheets**: {message} - Registros subidos: {count}")
        
        # Ejecutar b√∫squeda principal con callback mejorado
        result_df, message = main(
            query=query,
            location=location,
            max_results=None,
            progress_callback=update_progress_callback
        )
        
        if result_df is None:
            st.error(f"‚ùå Error en la b√∫squeda: {message}")
            return None, message
        
        # Completado con resumen final
        main_progress.progress(100)
        status_text.text("üéâ ¬°Proceso completado exitosamente!")
        
        # Mostrar resumen final
        final_stats = st.session_state.current_stats
        details_text.success(f"""
        üéâ **PROCESO COMPLETADO** - Resumen Final:
        - üìç Lugares encontrados: {final_stats['places_found']}
        - üåê Emails extra√≠dos: {final_stats['emails_found']}
        - ‚òÅÔ∏è Registros en Sheets: {final_stats['sheets_uploaded']}
        """)
        
        return result_df, message
        
    except Exception as e:
        st.error(f"‚ùå Error durante la ejecuci√≥n: {str(e)}")
        return None, str(e)

def show_results_section(df, message):
    """Muestra la secci√≥n de resultados mejorada"""
    st.markdown("### üìä Resultados de la B√∫squeda")
    
    if df is not None and not df.empty:
        # Banner de √©xito
        st.markdown(f"""
        <div class="success-banner">
            <h3>‚úÖ ¬°B√∫squeda Completada Exitosamente!</h3>
            <p>{message}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # M√©tricas resumen mejoradas
        st.markdown("#### üìà Resumen de Resultados")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "üè¢ Total Lugares",
                len(df),
                delta="Encontrados"
            )
        
        with col2:
            emails_count = sum(1 for x in df['scraped_emails'] if x and str(x).strip() and str(x) != 'nan')
            st.metric(
                "üìß Con Emails",
                emails_count,
                delta=f"{emails_count/len(df)*100:.1f}%"
            )
        
        with col3:
            websites_count = sum(1 for x in df['websiteUri'] if x and str(x).strip() and str(x) != 'nan')
            st.metric(
                "üåê Con Website",
                websites_count,
                delta=f"{websites_count/len(df)*100:.1f}%"
            )
        

        
        st.markdown("---")
        
        # Tabla de resultados mejorada
        st.markdown("#### üìã Tabla de Resultados")
        
        # Preparar datos para mostrar
        display_df = df[[
            'displayName.text',
            'formattedAddress', 
            'nationalPhoneNumber',
            'websiteUri',
            'scraped_emails',
            'rating',
            'userRatingCount'
        ]].copy()
        
        # Renombrar columnas para mejor visualizaci√≥n
        display_df.columns = [
            'üè¢ Nombre',
            'üìç Direcci√≥n',
            'üìû Tel√©fono',
            'üåê Website',
            'üìß Emails',
            '‚≠ê Rating',
            'üë• Opiniones'
        ]
        
        # Mostrar tabla con configuraci√≥n mejorada
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                'üåê Website': st.column_config.LinkColumn("üåê Website"),
                '‚≠ê Rating': st.column_config.NumberColumn(
                    "‚≠ê Rating",
                    format="%.1f ‚≠ê"
                ),
                'üë• Opiniones': st.column_config.NumberColumn(
                    "üë• Opiniones",
                    format="%d"
                )
            }
        )
        
        # Botones de descarga mejorados
        st.markdown("#### üíæ Opciones de Descarga")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # CSV completo
            csv_buffer = io.StringIO()
            df.to_csv(csv_buffer, index=False)
            st.download_button(
                label="üìÑ Descargar CSV Completo",
                data=csv_buffer.getvalue(),
                file_name=f"leads_completo_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            # CSV filtrado (solo con emails)
            df_with_emails = df[df['scraped_emails'].notna() & (df['scraped_emails'] != '')]
            if not df_with_emails.empty:
                csv_buffer_filtered = io.StringIO()
                df_with_emails.to_csv(csv_buffer_filtered, index=False)
                st.download_button(
                    label="üìß Solo con Emails",
                    data=csv_buffer_filtered.getvalue(),
                    file_name=f"leads_emails_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            else:
                st.info("Sin registros con emails")
        
        with col3:
            # Link a Google Sheets
            try:
                sheets_manager = GoogleSheetsManager()
                sheets_url = sheets_manager.get_sheet_url()
                st.link_button(
                    "‚òÅÔ∏è Ver en Google Sheets",
                    sheets_url,
                    use_container_width=True
                )
            except:
                st.info("Google Sheets no disponible")
    
    else:
        st.error("‚ùå No se pudieron obtener resultados")

def show_help_section():
    """Muestra la secci√≥n de ayuda actualizada"""
    st.markdown("""
    <div class="help-tab">
    
    ### üìñ Gu√≠a de Uso Actualizada
    
    **1. Dashboard Hist√≥rico:**
    - **üìä Estad√≠sticas:** Ve el resumen de todas tus b√∫squedas anteriores
    - **üìà Eficiencia:** Analiza las tasas de extracci√≥n de emails y sitios web
    - **üïí Actividad:** Revisa tus b√∫squedas m√°s recientes y populares
    
    **2. Configuraci√≥n de B√∫squeda:**
    - **Tipo de negocio:** S√© espec√≠fico (ej: "restaurante italiano", "gimnasio 24 horas")
    - **Ubicaci√≥n:** Usa barrios o zonas espec√≠ficas (ej: "Palermo, Buenos Aires")
    
    **3. Proceso Autom√°tico:**
    - **üåê Web Scraping:** Siempre activo - extrae emails y redes sociales autom√°ticamente
    - **‚òÅÔ∏è Google Sheets:** Siempre activo - guarda autom√°ticamente en tu hoja de c√°lculo
    
    **4. Proceso de B√∫squeda en Tiempo Real:**
    - **Fase 1:** B√∫squeda en Google Places (encuentra todos los lugares disponibles)
    - **Fase 2:** Web scraping para extraer emails y contactos adicionales
    - **Fase 3:** Subida autom√°tica a Google Sheets
    
    **5. Interpretaci√≥n de Resultados:**
    - **üìç Lugares:** Total de negocios encontrados
    - **üìß Emails:** Contactos de email extra√≠dos de sitios web
    - **‚≠ê Rating:** Calificaci√≥n promedio del negocio
    
    **6. Consejos para Mejores Resultados:**
    - Usa t√©rminos espec√≠ficos y combinaciones
    - Prueba diferentes ubicaciones (barrios, calles principales)
    - Activa todas las opciones para obtener informaci√≥n completa
    - Descarga en CSV para an√°lisis posterior
    
    **7. Tiempos Estimados:**
    - 10-50 lugares: 1-2 minutos
    - 50-200 lugares: 3-8 minutos
    - 200+ lugares: 8-15 minutos
    
    </div>
    """, unsafe_allow_html=True)

# Configuraci√≥n de autenticaci√≥n
def get_admin_password():
    """Obtiene la contrase√±a de administrador desde secrets o fallback"""
    try:
        return st.secrets["app"]["admin_password"]
    except (KeyError, AttributeError):
        # Fallback para desarrollo local
        return "CotiVentasB2B2025"

def show_login_screen():
    """Muestra la pantalla de login"""
    st.markdown("""
    <div class="login-container">
        <h1>üîê ACCESO RESTRINGIDO</h1>
        <p>Esta aplicaci√≥n requiere autenticaci√≥n para acceder</p>
        <p>COTI Lead Generator - Sistema Protegido</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Centrar el formulario de login
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown('<div class="login-form">', unsafe_allow_html=True)
        
        with st.form("login_form"):
            st.markdown("#### üîë Ingresa la contrase√±a de acceso")
            password = st.text_input(
                "Contrase√±a:",
                type="password",
                placeholder="Introduce tu contrase√±a...",
                help="Contacta al administrador si no tienes acceso"
            )
            
            col1_btn, col2_btn, col3_btn = st.columns([1, 2, 1])
            with col2_btn:
                login_button = st.form_submit_button(
                    "üöÄ Acceder", 
                    type="primary",
                    use_container_width=True
                )
            
            if login_button:
                if password == get_admin_password():
                    st.session_state.authenticated = True
                    st.success("‚úÖ ¬°Acceso concedido! Redirigiendo...")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.markdown("""
                    <div class="error-message">
                        ‚ùå Contrase√±a incorrecta. Intenta nuevamente.
                    </div>
                    """, unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.info("üîí **Seguridad:** Esta aplicaci√≥n procesa datos sensibles de negocios y requiere autenticaci√≥n.")

def show_logout_option():
    """Muestra opci√≥n de logout en el sidebar"""
    with st.sidebar:
        st.markdown("### üë§ Sesi√≥n Activa")
        st.success("‚úÖ Autenticado correctamente")
        
        if st.button("üö™ Cerrar Sesi√≥n", type="secondary"):
            st.session_state.authenticated = False
            st.success("üëã Sesi√≥n cerrada correctamente")
            time.sleep(1)
            st.rerun()

def main_app():
    """Funci√≥n principal de la aplicaci√≥n"""
    initialize_session_state()
    
    # Verificar autenticaci√≥n
    if not st.session_state.authenticated:
        show_login_screen()
        return
    
    # Mostrar opci√≥n de logout
    show_logout_option()
    
    create_header()
    
    # Crear tabs
    tab1, tab2 = st.tabs(["üöÄ Generador", "‚ùì Ayuda"])
    
    with tab1:
        # Dashboard hist√≥rico
        show_dashboard()
        
        # Mini instructivo
        show_instructivo()
        
        # Secci√≥n de configuraci√≥n mejorada
        st.markdown("""
        <div class="config-section">
        """, unsafe_allow_html=True)
        
        st.markdown("### ‚öôÔ∏è Configuraci√≥n de B√∫squeda")
        
        # Campos principales alineados
        col1, col2 = st.columns(2)
        
        with col1:
            query = st.text_input(
                "üîç Tipo de negocio",
                value="restaurant",
                help="Especifica qu√© tipo de negocio buscas (ej: restaurantes, cafeter√≠as, gimnasios, dentistas)",
                placeholder="Ejemplo: restaurante italiano"
            )
        
        with col2:
            location = st.text_input(
                "üìç Ubicaci√≥n",
                value="Buenos Aires, Argentina",
                help="Ciudad, barrio o direcci√≥n espec√≠fica donde realizar la b√∫squeda",
                placeholder="Ejemplo: Palermo, Buenos Aires"
            )
        
        # Configurar opciones siempre activadas (no mostrar en UI)
        include_scraping = True  # Siempre hacer web scraping
        save_to_sheets = True    # Siempre guardar en Google Sheets
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Bot√≥n de b√∫squeda centrado y mejorado
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            search_button = st.button(
                "üöÄ Iniciar B√∫squeda Completa",
                type="primary",
                use_container_width=True,
                disabled=not query or not location
            )
        
        # Validaci√≥n de entrada
        if not query or not location:
            st.warning("‚ö†Ô∏è Por favor completa el tipo de negocio y la ubicaci√≥n para continuar")
        
        # Ejecutar b√∫squeda
        if search_button:
            with st.spinner("üîÑ Preparando b√∫squeda..."):
                result_df, message = execute_search(
                    query, location,
                    include_scraping, save_to_sheets
                )
                
                if result_df is not None:
                    st.session_state.results_df = result_df
                    st.session_state.search_completed = True
        
        # Mostrar resultados si existen
        if st.session_state.search_completed and st.session_state.results_df is not None:
            st.markdown("---")
            show_results_section(st.session_state.results_df, "B√∫squeda completada exitosamente")
    
    with tab2:
        show_help_section()

if __name__ == "__main__":
    main_app() 